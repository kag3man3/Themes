@model DevPartner.Nop.Plugin.Misc.Search.Models.ProductView
@using DevPartner.Nop.Plugin.Core.Helpers
@using Nop.Web.Models.Catalog;

<div class="product-selectors">

    @*|
        @if (Model.Search.Sort.NotNullAnd(s => s.StartsWith("random")))
        {
            <strong>Random</strong>
        }
        else
        {
            <a href="@Url.SetParameter(" sort", "random_" + Html.RandomNumber())">Random</a>
        }*@

    <div class="product-sorting">
        <span>@T("Catalog.OrderBy")</span>
        @if (string.IsNullOrEmpty(Model.Search.Sort))
        {
            <b>@T("DevPartner.Search.Sort.BestMatch")</b>
        }
        else
        {
            <a href="@Url.RemoveParameters("sort")">
                @T("DevPartner.Search.Sort.BestMatch")
            </a>
        }
        |
        @if (Model.Search.Sort == "price")
        {
            <b>
                @T("DevPartner.Search.Sort.Price")
            </b>
        }
        else
        {
            <a href="@Url.SetParameter("sort", "price")">@T("DevPartner.Search.Sort.Price")</a>
        }

    </div>

    @*<div class="product-sorting">
            <span>@T("Catalog.PageSize")</span>
            @{
                var arrPS = new[] { 5, 10, 20 };
                for (int i = 0; i < arrPS.Length; i++)
                {
                    var ps = arrPS[i];
                    if (ps == Model.Search.PageSize)
                    {
                        <b>@ps</b>
                    }
                    else
                    {
                        <a href="@Url.SetParameters(new {pagesize = ps, page = 1})">@ps</a>
                    }
                    if (arrPS.Length != i + 1)
                    {
                        @Html.Raw("|")
                        ;
                    }
                }
            }
            <span>@T("Catalog.PageSize.PerPage")</span>
        </div>*@


    @*<div class="product-selectors">
            @if (Model.AllowProductViewModeChanging)
            {
                <div class="product-viewmode">
                    <span>@T("Catalog.ViewMode")</span>
                    @if (Model.AvailableViewModes.Count > 1)
                    {
                        var gridMode = Model.AvailableViewModes[0];
                        var listMode = Model.AvailableViewModes[1];

                        <a class="viewmode-icon grid @if(gridMode.Selected){<text>selected</text>}" href="@gridMode.Value" title="@gridMode.Text">@gridMode.Text</a>
                        <a class="viewmode-icon list @if (listMode.Selected){<text>selected</text>}" href="@listMode.Value" title="@listMode.Text">@listMode.Text</a>
                    }
                </div>
            }
            @if (Model.AllowProductSorting)
            {
                <div class="product-sorting">
                    <span>@T("Catalog.OrderBy")</span>
                    @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
                </div>
            }
            @if (Model.AllowCustomersToSelectPageSize)
            {
                <div class="product-page-size">
                    <span>@T("Catalog.PageSize")</span>
                    @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { onchange = "setLocation(this.value);" })
                    <span>@T("Catalog.PageSize.PerPage")</span>
                </div>
            }
        </div>*@
</div>
